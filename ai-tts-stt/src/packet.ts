// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "packet.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message Packet
 */
export interface Packet {
    /**
     * @generated from protobuf field: uint32 sequenceNumber = 1
     */
    sequenceNumber: number; // not used in Buffer mode
    /**
     * @generated from protobuf field: uint32 timestamp = 2
     */
    timestamp: number; // not used in Buffer mode
    /**
     * @generated from protobuf field: bytes payload = 5
     */
    payload: Uint8Array;
}
// @generated message type with reflection information, may provide speed optimized methods
class Packet$Type extends MessageType<Packet> {
    constructor() {
        super("Packet", [
            { no: 1, name: "sequenceNumber", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "timestamp", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "payload", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<Packet>): Packet {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sequenceNumber = 0;
        message.timestamp = 0;
        message.payload = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<Packet>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Packet): Packet {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 sequenceNumber */ 1:
                    message.sequenceNumber = reader.uint32();
                    break;
                case /* uint32 timestamp */ 2:
                    message.timestamp = reader.uint32();
                    break;
                case /* bytes payload */ 5:
                    message.payload = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Packet, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 sequenceNumber = 1; */
        if (message.sequenceNumber !== 0)
            writer.tag(1, WireType.Varint).uint32(message.sequenceNumber);
        /* uint32 timestamp = 2; */
        if (message.timestamp !== 0)
            writer.tag(2, WireType.Varint).uint32(message.timestamp);
        /* bytes payload = 5; */
        if (message.payload.length)
            writer.tag(5, WireType.LengthDelimited).bytes(message.payload);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Packet
 */
export const Packet = new Packet$Type();
